%NOTE:
%Need to import GyroZ and Ltime columns from Bapgui

filenameSMid = 'T1S1.txt';
filenameSBase = 'T1S2.txt';
delimiterIn = ' ';
headerlinesIn = 1;
SMid = importdata(filenameSMid, delimiterIn, headerlinesIn);
SBase = importdata(filenameSBase, delimiterIn, headerlinesIn);

%Program reports data using the z-axis of the gyroscope
%including angular position, velocity, acceleration and jerk,
%includes correction factor

%import data
gyroMid(:,1) = (SMid.data(:,4))./32.75;  
gyroMid(:,2) = (SMid.data(:,5))./32.75;  
gyroMid(:,3) = (SMid.data(:,6))./32.75;          %Gyroscope correction factor
gyroBase(:,1) = (SBase.data(:,4))./32.75;  
gyroBase(:,2) = (SBase.data(:,5))./32.75;  
gyroBase(:,3) = (SBase.data(:,6))./32.75;          %Gyroscope correction factor
LtimeMid = (SMid.data(:,10));
LtimeBase = (SBase.data(:,10));
tMid = transpose((LtimeMid-LtimeMid(1))./1000);     %relative to start time, ms to s
tBase = transpose((LtimeBase-LtimeBase(1))./1000);



%*******low pass filter*****
x_filter = designfilt('lowpassiir','FilterOrder',3,...
            'PassbandFrequency',10e3,'PassbandRipple',0.5,...
            'SampleRate',200e3);
gyroMid = filtfilt(x_filter,gyroMid);
gyroBase = filtfilt(x_filter,gyroBase);


%best fit code
%t3(:,1) = transpose(t);
%t3(:,2) = transpose(t);
%t3(:,3) = transpose(t);
%p1 = polyfit(t3,gyro,1);
%c_velocity = transpose(polyval(p1,t));      %best fit line of velocity data


%kinect corrections
%IMU_coeff = polyfit(transpose(IMU_plot_x),IMU_plot_func,1);
%IMU_bestfit = transpose(polyval(IMU_coeff,IMU_plot_x));

%mean_kinect = mean(Kin_plot_func);
%mean_kinect_line = ones([length(Kin_plot_func),1]);
%mean_kinect_line = mean_kinect_line .* mean_kinect;

%IMU_fusion = IMU_bestfit.*(-1);
%IMU_fusion = IMU_fusion + mean_kinect;
%IMU_corrected_func = IMU_plot_func + IMU_fusion;
%mean_IMU_line = ones([length(IMU_plot_func),1]).*mean_kinect;



%differentiation and integration
accelerationMid = diff(gyroMid);             % vel to accel 
accelerationMid = [0,[1 3];accelerationMid];
jerkMid = diff(accelerationMid);             %accel to jerk
jerkMid = [0,[1 3];jerkMid];
positionMid = trapz(tMid,gyroMid);
distanceMid = cumtrapz(tMid,gyroMid);     % vel to distance




subplot(3,1,1)
plot(tMid,distanceMid(:,1))
title('Angular Distance (deg)')
ylabel('x'),xlabel('Time (s)')
ylim([-200 200])

subplot(3,1,2)
plot(tMid,distanceMid(:,2))
ylabel('y'),xlabel('Time (s)')
ylim([-200 200])

subplot(3,1,3)
plot(tMid,distanceMid(:,3))
ylabel('z'),xlabel('Time (s)')
ylim([-200 200])


%results
%abs_distance = cumtrapz(t,abs(gyro));

%result_duration = t(end);                   %report duration of test
%result_Fs = length(gyro)/t(end);       %Fs = sampling frequency
%result_xdistance = abs(abs_distance(end,1));      %report final distance
%result_ydistance = abs(abs_distance(end,2));
%result_zdistance = abs(abs_distance(end,3));  
%result_drift = abs(gyro(end,1)-gyro(onepercent,1));
%result_bfdrift = abs(c_velocity(end)-c_velocity(1)); %difference in begin to end of best fit velocity
%result_mean_vel = abs(mean(gyro(:,3)));   %report mean velocity


%subplot(3,1,3)
%plot(t,c_velocity(:,1))
%ylim([-2 0])



%{
%correction
vdelta = v1 - v1(1);            %discrepancy between velocity and best fit


vel_corrected = velocity - abs(vdelta);     %subtract discprepancy from velocity
dist_corrected = cumtrapz(t,vel_corrected);  %find absolute distance

%p2 = polyfit(transpose(t),vel_corrected,1);
%v2 = transpose(polyval(0.13,t));

%frequency consistency
delta_t = 0;
for n=2:length(t)
    delta_t(end+1)=t(n)-t(n-1);
end;

%results:

result_corrected_distance = dist_corrected(end);     %report final corrected distance
result_distance = distance(end);    %report final distance
result_mean_vel = abs(mean(velocity));   %report mean velocity

%plotting
set(gcf,'color','white')
subplot(3,1,1)
plot (t,velocity)
title('Angular Velocity vs Time')
ylabel('Velocity (deg/s)'), %xlabel('Time (s)')
xlim([0 t(end)])

subplot(3,1,2)
plot (t,v1)
title('Best Fit Angular Velocity vs Time')
ylabel('Best Fit Velocity (deg/s)'), %xlabel('Time (s)')
xlim([0 t(end)])

subplot(3,1,3)
plot(t,distance)
title('Angular Distance vs Time')
ylabel('Distance(deg)'), xlabel ('Time (s)')
xlim([0 t(end)])

%subplot(4,1,4)
%plot(t,transpose(delta_t))
%ylabel('delta t (s)'), xlabel ('time (s)')
%}